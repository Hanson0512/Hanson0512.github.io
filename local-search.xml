<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python库的使用一：sympy</title>
    <link href="/2024/12/08/Python%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80%EF%BC%9Asympy%E5%BA%93/"/>
    <url>/2024/12/08/Python%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80%EF%BC%9Asympy%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Sympy库"><a href="#Sympy库" class="headerlink" title="Sympy库"></a>Sympy库</h1><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>作为一门易于上手、功能强大的编程语言，Python 拥有众多优秀的科学计算库。</p><p>其中，Sympy 库凭借其简单易懂的语法、丰富的功能和优雅的解决方法，逐渐成为 Python 开发者们解决数学计算问题的首选工具。</p><p>本文将重点介绍 Sympy 库的优势、常用函数方法、以及在CTF比赛中的简单应用。</p><h2 id="二、Sympy-库简介"><a href="#二、Sympy-库简介" class="headerlink" title="二、Sympy 库简介"></a>二、Sympy 库简介</h2><p>Sympy 是一个纯 Python 的数学计算库，可以用于解决从初中数学到高级数学的各类问题。</p><p>它支持符号计算、数值计算、代数运算、微积分、线性代数等功能，涵盖了数学、物理、工程等领域的大量应用。</p><h2 id="三、Sympy库的简单使用"><a href="#三、Sympy库的简单使用" class="headerlink" title="三、Sympy库的简单使用"></a>三、Sympy库的简单使用</h2><ul><li><p>表达式与表达式求值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#--------多项式求解--------</span><br><span class="hljs-comment">#定义变量</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>fx=<span class="hljs-number">5</span>*x+<span class="hljs-number">4</span><br><span class="hljs-comment">#使用evalf函数传值</span><br>y1=fx.evalf(subs=&#123;x:<span class="hljs-number">6</span>&#125;)<br><span class="hljs-built_in">print</span>(y1)<br><br><span class="hljs-comment">#多元表达式</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=sympy.Symbol(<span class="hljs-string">&#x27;y&#x27;</span>)<br>fx=x*x+y*y<br>result=fx.evalf(subs=&#123;x:<span class="hljs-number">3</span>,y:<span class="hljs-number">4</span>&#125;)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></li><li><p>函数方程求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#解方程 有限解</span><br><span class="hljs-comment">#定义变量</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=sympy.Symbol(<span class="hljs-string">&#x27;y&#x27;</span>)<br>fx=x*<span class="hljs-number">3</span>+<span class="hljs-number">9</span><br><span class="hljs-comment">#可求解直接给出解向量</span><br><span class="hljs-built_in">print</span>(sympy.solve(fx,x))<br><br><span class="hljs-comment">#解方程无穷多解</span><br><span class="hljs-comment">#定义变量</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=sympy.Symbol(<span class="hljs-string">&#x27;y&#x27;</span>)<br>fx=x*<span class="hljs-number">3</span>+y**<span class="hljs-number">2</span><br><span class="hljs-comment">#得到是x与y的关系式，</span><br><span class="hljs-built_in">print</span>(sympy.solve(fx,x,y))<br><br><span class="hljs-comment">#解方程组</span><br><span class="hljs-comment">#定义变量</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>y=sympy.Symbol(<span class="hljs-string">&#x27;y&#x27;</span>)<br>f1=x+y-<span class="hljs-number">3</span><br>f2=x-y+<span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(sympy.solve([f1,f2],[x,y]))<br></code></pre></td></tr></table></figure></li><li><p>求和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><span class="hljs-comment">#定义变量</span><br>n=sympy.Symbol(<span class="hljs-string">&#x27;n&#x27;</span>)<br>f=<span class="hljs-number">2</span>*n<br><span class="hljs-comment">#前面参数放函数，后面放变量的变化范围</span><br>s=sympy.summation(f,(n,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>))<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure></li><li><p>解带有求和式的方程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#解释一下，i可以看做是循环变量，就是x自己加五次</span><br><span class="hljs-comment">#先定义变量，再写出方程</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>i=sympy.Symbol(<span class="hljs-string">&#x27;i&#x27;</span>)<br>f=sympy.summation(x,(i,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))+<span class="hljs-number">10</span>*x-<span class="hljs-number">15</span><br>result=sympy.solve(f,x)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></li><li><p>求极限，求导，求积分：</p><p>（sympy.oo是无穷大的意思）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#求极限使用limit方法</span><br><span class="hljs-comment">#定义变量与函数</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>f1=sympy.sin(x)/x<br>f2=(<span class="hljs-number">1</span>+x)**(<span class="hljs-number">1</span>/x)<br>f3=(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>/x)**x<br><span class="hljs-comment">#三个参数是 函数，变量，趋向值</span><br>lim1=sympy.limit(f1,x,<span class="hljs-number">0</span>)<br>lim2=sympy.limit(f2,x,<span class="hljs-number">0</span>)<br>lim3=sympy.limit(f3,x,sympy.oo)<br><span class="hljs-built_in">print</span>(lim1,lim2,lim3)<br><br><span class="hljs-comment">#求导使用diff方法</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>f1=<span class="hljs-number">2</span>*x**<span class="hljs-number">4</span>+<span class="hljs-number">3</span>*x+<span class="hljs-number">6</span><br><span class="hljs-comment">#参数是函数与变量</span><br>f1_=sympy.diff(f,x)<br><span class="hljs-built_in">print</span>(f1_)<br> <br>f2=sympy.sin(x)<br>f2_=sympy.diff(f2,x)<br><span class="hljs-built_in">print</span>(f2_)<br> <br><span class="hljs-comment">#求偏导</span><br>y=sympy.Symbol(<span class="hljs-string">&#x27;y&#x27;</span>)<br>f3=<span class="hljs-number">2</span>*x**<span class="hljs-number">2</span>+<span class="hljs-number">3</span>*y**<span class="hljs-number">4</span>+<span class="hljs-number">2</span>*y<br><span class="hljs-comment">#对x，y分别求导，即偏导</span><br>f3_x=sympy.diff(f3,x)<br>f3_y=sympy.diff(f3,y)<br><span class="hljs-built_in">print</span>(f3_x)<br><span class="hljs-built_in">print</span>(f3_y)<br><br><span class="hljs-comment">#求定积分用 integrate方法</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>f=<span class="hljs-number">2</span>*x<br><span class="hljs-comment">#参数传入 函数，积分变量和范围</span><br>result=sympy.integrate(f,(x,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#求多重积分，先求里面的积分，再求外面的</span><br>x,t=sympy.symbols(<span class="hljs-string">&#x27;x t&#x27;</span>)<br>f1=<span class="hljs-number">2</span>*t<br>f2=sympy.integrate(f1,(t,<span class="hljs-number">0</span>,x))<br>result=sympy.integrate(f2,(x,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#求不定积分其实和定积分区别不大</span><br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>f=(sympy.E**x+<span class="hljs-number">2</span>*x)<br>f_=sympy.integrate(f,x)<br><span class="hljs-built_in">print</span>(f_)<br></code></pre></td></tr></table></figure></li><li><p>补充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#虚数单位i</span><br>sympy.I<br><span class="hljs-comment">#自然对数低e</span><br>sympy.E<br><span class="hljs-comment">#无穷大</span><br>sympy.oo<br><span class="hljs-comment">#圆周率</span><br>sympy.pi<br><span class="hljs-comment">#求n次方根</span><br>sympy.root(<span class="hljs-number">8</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">#求对数</span><br>sympy.log(<span class="hljs-number">1024</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">#求阶乘</span><br>sympy.factorial(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#三角函数</span><br>sympy.sin(sympy.pi)<br>sympy.tan(sympy.pi/<span class="hljs-number">4</span>)<br>sympy.cos(sympy.pi/<span class="hljs-number">2</span>)<br>x=sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-comment">#公式展开用expand方法</span><br>f=(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*x)*x**<span class="hljs-number">2</span><br>ff=sympy.expand(f)<br><span class="hljs-built_in">print</span>(ff)<br><span class="hljs-comment">#公式折叠用factor方法</span><br>f=x**<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*x<br>ff=sympy.factor(f)<br><span class="hljs-built_in">print</span>(ff)<br><span class="hljs-comment">#simplify( )普通的化简</span><br>simplify((x**<span class="hljs-number">3</span> + x**<span class="hljs-number">2</span> - x - <span class="hljs-number">1</span>)/(x**<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*x + <span class="hljs-number">1</span>))<br><span class="hljs-comment">#trigsimp( )三角化简</span><br>trigsimp(sin(x)/cos(x))<br><span class="hljs-comment">#powsimp( )指数化简</span><br>powsimp(x**a*x**b)<br></code></pre></td></tr></table></figure></li></ul><h2 id="四、sympy库在CTF比赛中的运用"><a href="#四、sympy库在CTF比赛中的运用" class="headerlink" title="四、sympy库在CTF比赛中的运用"></a>四、sympy库在CTF比赛中的运用</h2><p>在了解了sympy库的基本使用方法后，我们就要将它运用到CTF实战中了</p><p>那么在CTF中我们主要利用sympy库解决什么问题呢？或者说CTF的题目中出现什么问题需要通过sympy库来解决呢？根据笔者浅薄的做题经验以及在网上的信息搜集能够得出：</p><h5 id="在CTF比赛中，利用sympy我们能够快速且高效的解决离散对数相关的问题！"><a href="#在CTF比赛中，利用sympy我们能够快速且高效的解决离散对数相关的问题！" class="headerlink" title="在CTF比赛中，利用sympy我们能够快速且高效的解决离散对数相关的问题！"></a>在CTF比赛中，利用sympy我们能够快速且高效的解决<strong>离散对数</strong>相关的问题！</h5><h3 id="离散对数的基本介绍"><a href="#离散对数的基本介绍" class="headerlink" title="离散对数的基本介绍"></a>离散对数的基本介绍</h3><p>在这里我们先对离散对数问题进行一个简单的介绍，让读者对离散对数这个概念有简单的认识。</p><p><img src="/images/testa.png"></p><h3 id="与离散对数库相关的sympy库的使用"><a href="#与离散对数库相关的sympy库的使用" class="headerlink" title="与离散对数库相关的sympy库的使用"></a>与离散对数库相关的sympy库的使用</h3><p>在有了简单的认识后，接下来让我们隆重推出sympy库中的函数：discrete_log函数！</p><p>利用这个函数，我们能够高效且快捷的解决离散对数问题！</p><p>函数discrete_log(x,y,z)中，x是模数，y是余数，z是底数，返回值就是要求的指数</p><p>下面我们先给出一个简单的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> discrete_log<br><span class="hljs-meta">&gt;&gt;&gt; </span>discrete_log(<span class="hljs-number">41</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>)<br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>（这里利用discrete函数求出了在模41的情况下与15同余的7的多少次方的次方数）</p><h3 id="具体题目实践"><a href="#具体题目实践" class="headerlink" title="具体题目实践"></a>具体题目实践</h3><p>下面我们给出两道题目加深一下印象：</p><h4 id="第一道题的题目代码如下："><a href="#第一道题的题目代码如下：" class="headerlink" title="第一道题的题目代码如下："></a>第一道题的题目代码如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> gmpy2<br><br>m = bytes_to_long(<span class="hljs-string">b&#x27;flag&#123;*****&#125;&#x27;</span>)<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>r = getPrime(<span class="hljs-number">512</span>)<br>h1 = <span class="hljs-number">1</span>*p + <span class="hljs-number">1</span>*q + <span class="hljs-number">1</span>*r<br>h2 = <span class="hljs-number">2</span>*p + <span class="hljs-number">3</span>*q + <span class="hljs-number">3</span>*r<br>h3 = <span class="hljs-number">9</span>*p + <span class="hljs-number">9</span>*q + <span class="hljs-number">6</span>*r<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;hint_of_pqr=&quot;</span> , h1 , h2 , h3 )<br><br>e = getPrime(<span class="hljs-number">64</span>)<br>a_big_prime = getPrime( <span class="hljs-number">512</span> )<br>hint = <span class="hljs-built_in">pow</span>(a_big_prime,e,<span class="hljs-number">2</span>**<span class="hljs-number">512</span>)<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;big_prime is: &quot;</span> , a_big_prime )<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;hint is: &quot;</span> , hint )<br><br>n = p*q*r<br>c = <span class="hljs-built_in">pow</span>( m , e , n )<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;c=&quot;</span> , c )<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hint_of_pqr= 31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497 83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760 248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172 </span><br><span class="hljs-string">big_prime is:  10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379</span><br><span class="hljs-string">hint is:  1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571 </span><br><span class="hljs-string">c= 999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我们能够发现这题的关键不是素数分解，而是想办法把e求出来，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">hint = <span class="hljs-built_in">pow</span>(a_big_prime,e,<span class="hljs-number">2</span>**<span class="hljs-number">512</span>)<br></code></pre></td></tr></table></figure><p>通过这一段代码以及给出的数据，我们能够发现这就是一个标准的离散对数问题，因为在这段代码中，只有e是不知道的且e就是一个离散对数，那么我们就能利用discrete_log函数来求解了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> gmpy2<br><br>h1 = <span class="hljs-number">31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497</span><br>h2 = <span class="hljs-number">83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760</span><br>h3 = <span class="hljs-number">248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172</span><br>c = <span class="hljs-number">999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310</span><br>a_big_prime = <span class="hljs-number">10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379</span><br>hint = <span class="hljs-number">1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571</span><br><br>p = <span class="hljs-number">3</span> * h1 - h2<br>r = (<span class="hljs-number">9</span> * h1 - h3) // <span class="hljs-number">3</span><br>q = h1 - p - r<br>n = p * q * r<br><br>e = sympy.discrete_log(<span class="hljs-number">2</span>**<span class="hljs-number">512</span>, hint, a_big_prime)<br><br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c , d , n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment"># flag&#123;th1s_2s_A_rea119_f34ggg&#125;</span><br></code></pre></td></tr></table></figure><h4 id="第二道题的代码如下："><a href="#第二道题的代码如下：" class="headerlink" title="第二道题的代码如下："></a>第二道题的代码如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>n = <span class="hljs-number">2</span> ** <span class="hljs-number">512</span><br>m = random.randint(<span class="hljs-number">2</span>, n-<span class="hljs-number">1</span>) | <span class="hljs-number">1</span><br>c = <span class="hljs-built_in">pow</span>(m, bytes_to_long(flag), n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;m = &#x27;</span> + <span class="hljs-built_in">str</span>(m)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c)<br><br><span class="hljs-comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span><br><span class="hljs-comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span><br><br></code></pre></td></tr></table></figure><p>也是一个标准的离散对数问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory <span class="hljs-keyword">import</span> discrete_log<br>n = <span class="hljs-number">2</span>**<span class="hljs-number">512</span><br>m = <span class="hljs-number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span><br>c = <span class="hljs-number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span><br>flag_dec = discrete_log(n,c,m) <span class="hljs-comment">#得到flag的十进制值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag_dec)) <span class="hljs-comment">#转为十六进制后打印出来</span><br><br></code></pre></td></tr></table></figure><p>得到十六进制表示后，转化为ascⅡ即可</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>总的来说，sympy库是一个功能十分强大的库，虽然在某些情况下sympy的功能不如sagemath（比如矩阵相关的运算），但他作为python的一个库还是体现了非常强大的功能，在CTF比赛中，sympy库中的discrete_log函数也是一个常见的命题点。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/16/RSA%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/16/RSA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="非对称加密：RSA"><a href="#非对称加密：RSA" class="headerlink" title="非对称加密：RSA"></a>非对称加密：RSA</h1><h2 id="基本知识介绍"><a href="#基本知识介绍" class="headerlink" title="基本知识介绍"></a>基本知识介绍</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><h4 id="一、欧拉函数"><a href="#一、欧拉函数" class="headerlink" title="一、欧拉函数"></a>一、欧拉函数</h4><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义:"></a>1、定义:</h4><p>对于一个正整数n，n的欧拉函数ϕ ( n ) ，表示≤n与n互质的正整数的个数</p><h4 id="2、性质："><a href="#2、性质：" class="headerlink" title="2、性质："></a>2、性质：</h4><p>（1）如果n是质数，那么<img src="/images/5.png"></p><p>因为只有n本身与它不互质。</p><p>（2）如果p，q都是质数，那么<img src="/images/6.png"> </p><p>推导：推导:p , 2 p , 3 p , . . . . , ( q − 1 ) ∗ p 有 q − 1 个 数 整 除 p ∗ q ， 同 理 q , 2 q , 3 q , . . . , ( p − 1 ) ∗ q 有 p − 1 个 数 可 以 整 除 p q , 再 加 上 p q 本 身 能 整 除 p q ， 那 么 丢 掉 这 些 数 剩 余 的 数 就 与 p q 互 质 ， 一 共 有 p q − ( q − 1 + p − 1 + 1 ) &#x3D; ( p − 1 ) ( q − 1 ) 。 我们可以先进行一个简单的推广：a,b互质,<img src="/images/4.png"></p><p>继续进行推广便能得到第三个性质：</p><p>（3）如果p是质数，那么<img src="/images/3.png"></p><p>（4）对于任意正整数n，<img src="/images/2.png"></p><p> ， 其 中 p 1 , p 2 , p 3 , . . . , p n 是 n 的 质 因 子</p><p>（5）若a为质数,<img src="/images/1.png"></p><h4 id="二、欧拉定理"><a href="#二、欧拉定理" class="headerlink" title="二、欧拉定理"></a>二、欧拉定理</h4><p>若<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65f10f65fcba30f32673bd2ffe9f8e006f5a624b" alt="{\displaystyle n,a}">为正整数，且n,a互素则<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2e818f3f88d3e71e569f171dd86f31e1903fdc55" alt="{\displaystyle a^{\varphi (n)}\equiv 1{\pmod {n}}}"></p><p>即<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bb559a70a1b64bfa864fcb458ef9ebd027dc734e" alt="{\displaystyle a^{\varphi (n)}}">与1在模n下同余</p><p>特别地，当n是素数的时候，φ(n)&#x3D;n−1，所以欧拉定理变为：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3bfc8625369c7558deadd61823842db06983423d">或</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/578f207468d53d4691d91fa469583e2375107445" alt="{\displaystyle a^{n}\equiv a{\pmod {n}}}"></p><p>这就是<strong>费马小定理</strong></p><h4 id="三、中国剩余定理"><a href="#三、中国剩余定理" class="headerlink" title="三、中国剩余定理"></a>三、中国剩余定理</h4><p>在介绍这个定理之前，我们先介绍一些基本的数论知识</p><p>基本等式( 1 )  <strong>a m o d b &#x3D; ( a + k ∗ b ) m o d b</strong></p><p><strong>( 2 ) ( a ∗ k ) m o d b &#x3D; k ∗ ( a m o d b )</strong></p><p>那么我们设正整数m1、m2……mk两两互素，则同余方程组：</p><p><img src="/images/7.png"></p><p>有整数解，且在模M&#x3D;m1<em>m2</em>……*mk下的解是唯一的<img src="/images/8.png"></p><h4 id="四、威尔逊定理"><a href="#四、威尔逊定理" class="headerlink" title="四、威尔逊定理"></a>四、威尔逊定理</h4><p><img src="/images/9.png"></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="公钥与私钥的产生"><a href="#公钥与私钥的产生" class="headerlink" title="公钥与私钥的产生"></a>公钥与私钥的产生</h4><ol><li><p>随机选择两个不同大质数 pp 和 qq，计算 N&#x3D;p×qN&#x3D;p×q</p></li><li><p>根据欧拉函数，求得<br>$$<br>φ(N)&#x3D;φ(p)φ(q)&#x3D;(p−1)(q−1)<br>$$</p></li><li><p>选择一个小于 φ(N) 的整数 e，使 e 和 φ(N) 互质。并求得 e 关于φ(N) 的模反元素，命名为d，有<br>$$<br>ed≡1(modφ(N))<br>$$</p></li><li><p>将 p 和 q 的记录销毁</p></li></ol><p>此时，(N,e)是公钥，(N,d)是私钥。</p><h4 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h4><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 N，且与 N 互质的整数 m。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：<img src="/images/10.png"></p><h4 id="消息解密"><a href="#消息解密" class="headerlink" title="消息解密"></a>消息解密</h4><p>利用密钥 d 进行解密。<img src="/images/11.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>对于CTF中的crypto方向，我们主要使用的是<strong>Python</strong>（语法简单、可读性强且有很多强大的库）</p><p>下面我们用Python简单实现一下RSA的基本加密和解密过程：</p><p>1、生成两个大素数p，q</p><p>在实际使用RSA时，我们一般会用到512位、1024位甚至更高位数的素数（以后在crypto的内容中不特殊说明，所涉及到的位这一概念都是指二进制下的位数）</p><p>到这里，小萌新们可能会露出惊讶的表情：512位的素数怎么生成呢？</p><p>这就得发挥我们python的优势了：功能强大的库！</p><p>我们只需要在terminal中输入以下代码<img src="/images/12.png"></p><p>便可以成功安装。然后我们就可以利用这个功能强大的库来生成素数了。我们引入库中的子包：Crypto.Util.number（以后常用）<img src="/images/13.png"></p><p>接着就是正常运算即可<img src="/images/14.png"></p><p>2、选取e，并计算d</p><p>先上代码：<img src="/images/15.png"></p><p>这里<code>GCD</code>函数能够求解最大公因数（Greatest Common Divisor），这里我们用断言表达式认定e一定是和phi互素的。选择<code>65537</code>实际上这并不是硬性规定，一些标准提供了一些e的参考值，65537在各类实现与标准中被广泛使用，求d的过程中，我们使用了**<code>inverse</code>函数<strong>，该函数有两个参数<code>(a,p)</code>，作用便是</strong>求解<code>a</code>在模<code>p</code>意义下的乘法逆元**</p><p>至此我们便得到了公钥和私钥，随后我们便可以利用这组密钥进行加解密操作</p><p>对于我们要加密的信息，大部分情况下都不是一串长整型的数字，那么怎样将这样的信息利用RSA加密的方式进行加密呢？我们依然可以使用功能强大的库中的<strong>bytes_to_long</strong>函数，将字符串转换为数字</p><p><img src="/images/16.png"></p><p><img src="/images/17.png"></p><p>我们使用Python自带的<code>pow</code>函数进行幂运算，注意不要写成<code>m**e % n</code>，二者代表的意义相同，但是<code>pow</code>函数内置快速幂，可以快速得出结果，而<code>m**e % n</code>会将𝑚𝑒的结果先计算出来再取模，𝑚𝑒是一个非常大的数，这会消耗你计算机大量的运算和存储资源。</p><p>至此，我们便完成了加密过程，得到了RSA的密文C。</p><p>解密也很简单，只需要利用私钥：<img src="/images/18.png"></p><p>这便是RSA加解密的基本流程！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/16/hello-world/"/>
    <url>/2024/11/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
