<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/16/RSA%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/16/RSA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="非对称加密：RSA"><a href="#非对称加密：RSA" class="headerlink" title="非对称加密：RSA"></a>非对称加密：RSA</h1><h2 id="基本知识介绍"><a href="#基本知识介绍" class="headerlink" title="基本知识介绍"></a>基本知识介绍</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><h4 id="一、欧拉函数"><a href="#一、欧拉函数" class="headerlink" title="一、欧拉函数"></a>一、欧拉函数</h4><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义:"></a>1、定义:</h4><p>对于一个正整数n，n的欧拉函数ϕ ( n ) ，表示≤n与n互质的正整数的个数</p><h4 id="2、性质："><a href="#2、性质：" class="headerlink" title="2、性质："></a>2、性质：</h4><p>（1）如果n是质数，那么<img src="/images/5.png"></p><p>因为只有n本身与它不互质。</p><p>（2）如果p，q都是质数，那么<img src="/images/6.png"> </p><p>推导：推导:p , 2 p , 3 p , . . . . , ( q − 1 ) ∗ p 有 q − 1 个 数 整 除 p ∗ q ， 同 理 q , 2 q , 3 q , . . . , ( p − 1 ) ∗ q 有 p − 1 个 数 可 以 整 除 p q , 再 加 上 p q 本 身 能 整 除 p q ， 那 么 丢 掉 这 些 数 剩 余 的 数 就 与 p q 互 质 ， 一 共 有 p q − ( q − 1 + p − 1 + 1 ) &#x3D; ( p − 1 ) ( q − 1 ) 。 我们可以先进行一个简单的推广：a,b互质,<img src="/images/4.png"></p><p>继续进行推广便能得到第三个性质：</p><p>（3）如果p是质数，那么<img src="/images/3.png"></p><p>（4）对于任意正整数n，<img src="/images/2.png"></p><p> ， 其 中 p 1 , p 2 , p 3 , . . . , p n 是 n 的 质 因 子</p><p>（5）若a为质数,<img src="/images/1.png"></p><h4 id="二、欧拉定理"><a href="#二、欧拉定理" class="headerlink" title="二、欧拉定理"></a>二、欧拉定理</h4><p>若<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65f10f65fcba30f32673bd2ffe9f8e006f5a624b" alt="{\displaystyle n,a}">为正整数，且n,a互素则<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2e818f3f88d3e71e569f171dd86f31e1903fdc55" alt="{\displaystyle a^{\varphi (n)}\equiv 1{\pmod {n}}}"></p><p>即<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bb559a70a1b64bfa864fcb458ef9ebd027dc734e" alt="{\displaystyle a^{\varphi (n)}}">与1在模n下同余</p><p>特别地，当n是素数的时候，φ(n)&#x3D;n−1，所以欧拉定理变为：</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3bfc8625369c7558deadd61823842db06983423d">或</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/578f207468d53d4691d91fa469583e2375107445" alt="{\displaystyle a^{n}\equiv a{\pmod {n}}}"></p><p>这就是<strong>费马小定理</strong></p><h4 id="三、中国剩余定理"><a href="#三、中国剩余定理" class="headerlink" title="三、中国剩余定理"></a>三、中国剩余定理</h4><p>在介绍这个定理之前，我们先介绍一些基本的数论知识</p><p>基本等式( 1 )  <strong>a m o d b &#x3D; ( a + k ∗ b ) m o d b</strong></p><p><strong>( 2 ) ( a ∗ k ) m o d b &#x3D; k ∗ ( a m o d b )</strong></p><p>那么我们设正整数m1、m2……mk两两互素，则同余方程组：</p><p><img src="/images/7.png"></p><p>有整数解，且在模M&#x3D;m1<em>m2</em>……*mk下的解是唯一的<img src="/images/8.png"></p><h4 id="四、威尔逊定理"><a href="#四、威尔逊定理" class="headerlink" title="四、威尔逊定理"></a>四、威尔逊定理</h4><p><img src="/images/9.png"></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="公钥与私钥的产生"><a href="#公钥与私钥的产生" class="headerlink" title="公钥与私钥的产生"></a>公钥与私钥的产生</h4><ol><li><p>随机选择两个不同大质数 pp 和 qq，计算 N&#x3D;p×qN&#x3D;p×q</p></li><li><p>根据欧拉函数，求得<br>$$<br>φ(N)&#x3D;φ(p)φ(q)&#x3D;(p−1)(q−1)<br>$$</p></li><li><p>选择一个小于 φ(N) 的整数 e，使 e 和 φ(N) 互质。并求得 e 关于φ(N) 的模反元素，命名为d，有<br>$$<br>ed≡1(modφ(N))<br>$$</p></li><li><p>将 p 和 q 的记录销毁</p></li></ol><p>此时，(N,e)是公钥，(N,d)是私钥。</p><h4 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h4><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 N，且与 N 互质的整数 m。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：<img src="/images/10.png"></p><h4 id="消息解密"><a href="#消息解密" class="headerlink" title="消息解密"></a>消息解密</h4><p>利用密钥 d 进行解密。<img src="/images/11.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>对于CTF中的crypto方向，我们主要使用的是<strong>Python</strong>（语法简单、可读性强且有很多强大的库）</p><p>下面我们用Python简单实现一下RSA的基本加密和解密过程：</p><p>1、生成两个大素数p，q</p><p>在实际使用RSA时，我们一般会用到512位、1024位甚至更高位数的素数（以后在crypto的内容中不特殊说明，所涉及到的位这一概念都是指二进制下的位数）</p><p>到这里，小萌新们可能会露出惊讶的表情：512位的素数怎么生成呢？</p><p>这就得发挥我们python的优势了：功能强大的库！</p><p>我们只需要在terminal中输入以下代码<img src="/images/12.png"></p><p>便可以成功安装。然后我们就可以利用这个功能强大的库来生成素数了。我们引入库中的子包：Crypto.Util.number（以后常用）<img src="/images/13.png"></p><p>接着就是正常运算即可<img src="/images/14.png"></p><p>2、选取e，并计算d</p><p>先上代码：<img src="/images/15.png"></p><p>这里<code>GCD</code>函数能够求解最大公因数（Greatest Common Divisor），这里我们用断言表达式认定e一定是和phi互素的。选择<code>65537</code>实际上这并不是硬性规定，一些标准提供了一些e的参考值，65537在各类实现与标准中被广泛使用，求d的过程中，我们使用了**<code>inverse</code>函数<strong>，该函数有两个参数<code>(a,p)</code>，作用便是</strong>求解<code>a</code>在模<code>p</code>意义下的乘法逆元**</p><p>至此我们便得到了公钥和私钥，随后我们便可以利用这组密钥进行加解密操作</p><p>对于我们要加密的信息，大部分情况下都不是一串长整型的数字，那么怎样将这样的信息利用RSA加密的方式进行加密呢？我们依然可以使用功能强大的库中的<strong>bytes_to_long</strong>函数，将字符串转换为数字</p><p><img src="/images/16.png"></p><p><img src="/images/17.png"></p><p>我们使用Python自带的<code>pow</code>函数进行幂运算，注意不要写成<code>m**e % n</code>，二者代表的意义相同，但是<code>pow</code>函数内置快速幂，可以快速得出结果，而<code>m**e % n</code>会将𝑚𝑒的结果先计算出来再取模，𝑚𝑒是一个非常大的数，这会消耗你计算机大量的运算和存储资源。</p><p>至此，我们便完成了加密过程，得到了RSA的密文C。</p><p>解密也很简单，只需要利用私钥：<img src="/images/18.png"></p><p>这便是RSA加解密的基本流程！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2024/11/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/16/hello-world/"/>
    <url>/2024/11/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
